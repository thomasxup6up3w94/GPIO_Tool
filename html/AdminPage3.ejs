<!DOCTYPE html>
<html>

<head>
  <title>Admin Interface</title>
  <link rel="shortcut icon" type="image/ico" href="image/msi_icon.ico">
  <link rel="icon" href="http://127.0.0.1:3000/msi_icon.ico" type="image/x-icon" />
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    * {
      margin: 0;
      padding: 0;
    }

    table {
      border-collapse: collapse;
      /* margin: 50px 0 0 0; */
      margin: 10px 0 auto;
    }

    td {
      width: 100px;
      height: 50px;
      text-align: center;
      border: 2px solid #000;
    }

    .change {
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, .5);
      position: fixed;
      top: 0;
      left: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      display: none;
    }

    .change>div {
      padding: 30px 20px;
      height: 40px;
      background: #fff;
    }

    * {
      /* font-family: 微軟正黑體; */
      font-family: 微軟正黑體 'PT Sans', Helvetica, Arial, sans-serif;
    }

    body {
      background-color: white;
    }

    h3 {
      margin: 10px;
      /*外边距为10像素*/
      color: #df5334;
      /*文本颜色为#df5334*/
      text-align: center;
    }

    #username,
    #password,
    /* h3, */
    #fullname,
    #comfirm_password,
    #username2,
    #password2 {
      width: 200px;
      /*宽度被设置为200像素*/
      height: 20px;
      /*高度为20像素*/
      margin: 10px;
      /*外边距为10像素*/
      color: #df5334;
      /*文本颜色为#df5334*/
    }

    #container1,
    #container2 {
      margin: 50px;
      /*設定元素的外邊界 margin 為 50 個像素*/
      padding: 10px;
      /*設定元素內容的內邊界 padding 為 10 個像素*/
      width: 410px;
      /*設定元素的寬度為 230 像素*/
      height: 600px;
      /*設定元素的高度為 300 像素*/
      background-color: white;
      /*設定元素的背景色為白色*/
      border-radius: 5px;
      /*設定元素的邊框圓角半徑為 5 像素*/
      border-top: 10px solid #df5334;
      /*設定元素上邊框的樣式為實心，顏色為 #df5334，寬度為 10 像素*/
      box-shadow: 0 0px 70px rgba(0, 0, 0, 0.1);
      /*設定元素的陰影樣式為水平和垂直都不偏移，模糊度為 70 像素，顏色為 rgba(0, 0, 0, 0.1) 即黑色透明度 0.1。*/
      position: relative;
      /*設定元素的位置為相對定位。*/
      margin: auto;
      /*設定元素的左右 margin 為自動，讓元素在水平方向上置中。*/
      top: 100px;
      /*設定元素距離其父元素上邊界的距離為 100 像素。*/
      /* text-align: center; */
      /*設定元素內容的文字水平置中對齊*/
    }

    .system_name {
      position: relative;
      /*相對定位，表示該元素相對於其正常位置進行移動。*/
      margin: auto;
      /*自動居中，表示該元素的左右邊距會自動調整以實現水平居中對齊。*/
      top: 100px;
      /*設置該元素與頁面頂部的距離為 100 像素。*/
      text-align: center;
      /*設置該元素內容的水平對齊方式為居中。*/
    }

    .submit {
      color: white;
      /*文字顏色為白色*/
      background: #df5334;
      /*按鈕背景顏色為深橙色*/
      width: 200px;
      /*按鈕寬度為 200 像素。*/
      height: 30px;
      /*按鈕高度為 30 像素。*/
      margin: 10px;
      /*設置按鈕與其他元素之間的外邊距為 10 像素。*/
      padding: 5px;
      /*設置按鈕內容與邊框之間的內邊距為 5 像素。*/
      border-radius: 5px;
      /*設置按鈕的邊框圓角為 5 像素。*/
      border: 0px;
      /*設置按鈕邊框為 0 像素，即不顯示邊框。*/
    }

    .submit:hover {
      background: #db6937;
    }

    #container2 {
      visibility: hidden;
      /*剛開始消失*/
      height: 350px;
    }

    #copyright {
      text-align: center;
      /*文字水平居中對齊。*/
      color: #a3a2a3;
      /*文字顏色為淡灰色。*/
      margin: -200px 0px 0px 0px;
      /*元素的外邊距，其中 "-200px" 表示將元素向上移動 200 像素。*/
      font-size: 14px;
      /*文字大小為 14 像素。*/
    }

    input {
      padding: 5px;
      /*設置 input 元素內容與邊框之間的內邊距為 5 像素。*/
      border: none;
      /*設置 input 元素的邊框為無。*/
      border: solid 1px #ccc;
      /*設置 input 元素的邊框為實心，邊框寬度為 1 像素，顏色為淺灰色。*/
      border-radius: 5px;
      /*設置 input 元素的邊框圓角為 5 像素。*/
    }

    #password-toggle {
      width: 30px;
      height: 20px;
      position: absolute;
      top: 157px;
      left: 197px;
    }

    .password-input {
      display: inline-block;
    }

    .password-image {
      display: inline-block;
    }

    label {
      /* label[for="username"] { */
      color: #a3a2a3;
      font-size: 15px;
      font-family: 微軟正黑體 Arial, sans-serif;
    }
  </style>
</head>

<body>
  <div class="system_name">
  </div>
  <div id="container1">
    <h3>登入權限 Login Privilege</h3>
    <div name="add">
      Username: <input type="text" name="username" required><br>
      Access: <select name="Access">
        <option value="0">Admin</option>
        <option value="1">RD</option>
        <option value="2">PM</option>
        <option value="3">Deny</option>
      </select><br>
      <button>新增</button>
    </div>
    <div class="change" name="change">
      <div>
        <!-- username: <input type="text" name="username" required><br> -->
        Access: <select name="Access">
          <option value="0">Admin</option>
          <option value="1">RD</option>
          <option value="2">HW</option>
          <option value="3">PM</option>
        </select><br>
        <button name="c">修改</button>
        <button name="q">取消</button>
      </div>
    </div>
    <table>
      <thead>
        <tr>
          <td>Username</td>
          <td>Access</td>
          <td>删除</td>
          <td>修改</td>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>
  <!--container1 end -->
  <div id="copyright">
    <h4>Copyright © 2023 Thomasytlin All rights reserved</h4>
    <!--因為js，會跑版-->
  </div>
  <script>
    const arr = [];
    arr.name;
    arr.Access;
    // const arr = [{
    //     name: 'thomasytlin',
    //     Access: 'Admin',
    // },
    // {
    //     name: 'gavinchao',
    //     Access: 'RD',

    // },
    // {
    //     name: 'paulpeng',
    //     Access: 'RD',
    // },
    // ];
    // 定义数组 存储城市名称信息
    const cityArr = ['Admin', 'RD', 'HW', 'PM'];
    // 调用函数 生成 动态渲染 生成标签对象
    <% for (let i = 0; i < arr.length; i++) { %>
    arr.push({
      name: '<%= arr[i].name %>',
      Access: cityArr['<%= arr[i].Access %>']
    });
    <% } %>
    // 在此处可以使用 arr 数组进行后续操作
    console.log(arr);
    setPage();
    // 新增操作:
    // 获取标签对象 新增标签对象
    const oAddDiv = document.querySelector('[name="add"]');
    const oBtnAdd = oAddDiv.querySelector('button');
    const oAddName = oAddDiv.querySelector('[name="username"]');
    const oAddCity = oAddDiv.querySelector('select');

    // 修改操作
    // 获取标签对象 修改标签对象
    const oChangeDiv = document.querySelector('[name="change"]');
    const oBtnChange = document.querySelector('[name="c"]');
    const oBtnCancel = document.querySelector('[name="q"]');

    // const oChangeName = oChangeDiv.querySelector('[name="username"]');
    const oChangeCity = oChangeDiv.querySelector('select');

    // 定义变量 存储 索引下标
    let index = 0;

    // 添加点击事件
    oBtnAdd.addEventListener('click', function() {
      // 获取数据
      var nameadd = oAddName.value;
      var city = oAddCity.value;

      // console.log(name1, city);

      // 向 数组 新增 对象单元
      // id 是最后有一个单元的 id值 +1
      // select的数据 是 数组通过索引下标获取的对应的数值
      if (nameadd) { // 当 nameadd 存在（非空）时执行以下操作

        // 遍历 arr 数组，检查每个对象的 name 值
        const isDuplicate = arr.some(item => item.name === nameadd);
        if (!isDuplicate) {
          arr.push({
            // id: arr[arr.length - 1].id + 1,
            name: nameadd,
            Access: cityArr[city]
          });
          console.log(arr);

          // 將新增的資料以POST請求傳送到後端
          fetch('/addData', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                name: nameadd,
                // Access: cityArr[city]
                Access: city
              })
            })
            .then((res) => res.json())
            .then((data) => {
              console.log(data);
              // 處理後端回傳的結果
            })
            .catch((err) => console.error(err));

          // 再次调用函数 动态渲染生成页面
          setPage();
        }
      }
    })
    // 删除操作 事件委托
    // 修改操作 事件委托
    var oTbody = document.querySelector('tbody');
    oTbody.addEventListener('click', function(e) {
      // 通过 e.target 的 name属性 判断 如果是del是删除按钮
      if (e.target.getAttribute('name') === 'del') {
        // 执行删除程序
        // 删除数组中 和 对应的删除按钮 匹配的数组中的数据
        // 获取 删除对象单元的索引下标 也就是 标签中 index属性的属性值
        // 获取的属性值 都是字符串类型 需要转化为数值类型
        var num = e.target.getAttribute('index') - 0;
        // console.log(index);
        // 发送删除请求
        // const removedElement = arr.splice(num, 1)[0]?.name;
        const removedElement = arr[num]?.name;
        // console.log(removedElement);
        fetch('/delete', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            // body: JSON.stringify({ arr }),
            body: JSON.stringify({
              name: removedElement
            }),
          })
          .then((res) => res.json())
          .then((data) => {
            console.log(data);
            // 处理结果
          })
          .catch((err) => console.error(err));
        // const xhr = new XMLHttpRequest();
        // xhr.open('POST', '/delete');
        // xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
        // xhr.onload = function () {
        //     if (xhr.status === 200) {
        //         console.log(xhr.responseText);
        //     } else {
        //         console.log('Error');
        //     }
        // };
        // xhr.send(JSON.stringify({ name: removedElement }));

        // 用 index的属性值 作为 索引下标 从数组中删除一个对象
        arr.splice(num, 1);
        console.log(arr);
        // 再次调用函数 动态渲染生成页面
        // 再次动态渲染生成的页面 内容是全新的页面内容
        setPage();
        // 通过 e.target 的 name属性 判断 如果是change是修改按钮
      } else if (e.target.getAttribute('name') === 'change') {
        // 让 修改div显示 
        // 变量储存点击标签对应的数组的索引下标
        oChangeDiv.style.display = 'flex';
        // 变量 存储 点击标签index属性属性值
        index = e.target.getAttribute('index') - 0;
      }
    })
    // 修改div中的取消按钮
    // 点击时 让 修改div隐藏
    oBtnCancel.addEventListener('click', function() {
      oChangeDiv.style.display = 'none';
    })
    // 修改div中的修改按钮
    // 获取数据
    // 修改 索引下标对应的数组单元中,存储对象的数据
    // 根据新的数组动态渲染生成页面
    // 让修改div隐藏
    oBtnChange.addEventListener('click', function() {
      // 获取数据
      // input 直接获取数据
      // select 获取索引下标 从数组中获取对应的数据
      // input>radio  input>checkbox 判断 checked为true 再获取数据
      // let name2 = oChangeName.value;
      let value2 = cityArr[oChangeCity.value];
      // 修改数组中对应索引下标的标签对象
      // 也就是 给 索引下标对应的单元 重新存储一个对象
      // arr[index] = {id:arr[index].id,name:name,age:age,sex:sex,addr:city};
      // 一个一个属性的修改数据
      // arr[index].name = name2;
      arr[index].Access = value2;

      fetch('/revise', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            // name: name2,
            name: arr[index].name,
            Access: oChangeCity.value
          })
        })
        .then((res) => res.json())
        .then((data) => {
          console.log(data);
          // 处理结果
        })
        .catch((err) => console.error(err));
      // 根据新的数组动态渲染生成新的页面内容
      setPage();
      // 让修改div隐藏
      oChangeDiv.style.display = 'none';
    })
    // 动态渲染生成页面的函数
    function setPage() {
      // 定义字符串 存储 生成的标签内容
      var str = '';
      // 循环遍历 数组 每一个数组单元存储数据 生成一个对应的 tr>td
      // item 就是 存储数据的对象
      // key 存储 对象的索引下标
      arr.forEach(function(item, key) {
        str += `
                    <tr>
                        <td>${item.name}</td>
                        <td>${item.Access}</td>
                        <td><button name="del" index="${key}">删除</button></td>
                        <td><button name="change" index="${key}">修改</button></td>
                    </tr>
                `;
      })
      // 将字符串写入到标签对象中
      var oTbody = document.querySelector('tbody');
      oTbody.innerHTML = str;
    }
  </script>
</body>

</html>